import { Button, Col, Container, Row } from "reactstrap";
import BreadcrumComp from "../../components/breadcrumComp";
import FilterCard from "../../components/searchComponents/filterCard";
import InstallmentCard from "../../components/searchComponents/Quote";
import SearchCard from "../../components/searchComponents/searchCard";
import SearchDropdownDiv from "../../components/searchComponents/searchDropdownDiv";
import { getAll_products } from "../../store/searchslice";
import { useSelector } from "react-redux";
import { wrapper } from "../../store";
import { client } from "../../apollo-client";
import { gql } from "@apollo/client";
import { useCallback, useState, useEffect } from "react";
import { useQuery } from "@apollo/react-hooks";
import { useRouter } from "next/router";
import { BiFilter } from "react-icons/bi";
import axios from "axios";
import Head from 'next/head';
import { baseUrl } from "../../env";
import Pagination from "../../components/Pagination";

const brandNames = gql`
  query {
    productsBrands {
      data {
        id
        attributes {
          BrandName
        }
      }
    }
  }
`;

const modalNames = gql`
  query {
    carVariants {
      data {
        id
        attributes {
          ModelName
          Mileage
          Price
          Type
        }
      }
    }
  }
`;

const fuelTypes = gql`
  query {
    fuelTypes {
      data {
        id
        attributes {
          FuelType
        }
      }
    }
  }
`;

const carTypes = gql`
  query {
    carTypes {
      data {
        id
        attributes {
          CarType
        }
      }
    }
  }
`;

function Search() {
  const allproducts = useSelector((state) => state.searchproducts.products);
  const noOfProducts = useSelector((state) => state.searchproducts.totalProducts);
  // const grid = useSelector((state) => state.searchproducts.gridview);
  const navigate = useRouter();
  const [isMobile, setIsMobile] = useState(false);
  const [showFilter, setFilter] = useState(false);
  const [gridview, setGridView] = useState(false);

  const brandData = useQuery(brandNames);
  const modalData = useQuery(modalNames);
  const fuelData = useQuery(fuelTypes);
  const carData = useQuery(carTypes);

  const applyFilters = useCallback(
    (brandsSelected, carsSelected, modalsSelected, fuelSelected, min, max) => {
      const url = `&brandSelected=${brandsSelected}&carsSelected=${carsSelected}&modalsSelected=${modalsSelected}&fuelSelected=${fuelSelected}&min=${min}&max=${max}`;
      navigate.push(`/search/q=${url}`);
    }
  );

  const handleResize = () => {
    if (window.innerWidth < 720) {
      setIsMobile(true);
    } else {
      setIsMobile(false);
    }
  };

  useEffect(() => {
    window.addEventListener("resize", handleResize);
  });
  const changeGrid = () => {
    setGridView(true)
  }
  const changegridview = () => {
    setGridView(false)
  }
  return (
    <section className="white-bg-1 section pt-0 innernal-container2">
      <Head>
        <title>Nayagadi</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/Nayagadi_Icon.png" />
      </Head>
      <Container>
        <Row>
          <Col className="col-12">
            <BreadcrumComp active_page={"New Launches"}/>
          </Col>

          <Col className="col-md-9 order-lg-1 order-sm-2 order-2 mt-4 mt-lg-0">
            <div className="aside-left p-3">
              <SearchDropdownDiv changeGrid={changeGrid} changegridview={changegridview} gridview={gridview} />
              {/* <h5>Showing results 1 to 10 of total 90</h5> */}
              {allproducts?.length != 0 ? allproducts && allproducts?.map((data, id) => {
                return (
                  <div key={id}>
                    <SearchCard products={data} gridview={gridview} />
                  </div>
                )
              }) : <p>No Data Found</p>}
  
            </div>
            <Row>
              <Pagination noOfProducts={noOfProducts}/>
                {/* <Button className="btn-ash" >Load More Items</Button> */}
              </Row>
          </Col>

          <Col className="col-md-3 aside-right order-lg-2 order-1 d-none d-sm-block d-lg-block">
            {isMobile && (
              <BiFilter
                size={30}
                className="float-end"
                onClick={() => {
                  setFilter(!showFilter);
                }}
              />
            )}
            {brandData?.data &&
              modalData?.data &&
              fuelData?.data &&
              carData?.data &&
              showFilter &&
              isMobile && (
                <FilterCard
                  className={"mt-3"}
                  brandData={brandData.data.productsBrands.data}
                  modalData={modalData.data.carVariants.data}
                  fuelData={fuelData.data.fuelTypes.data}
                  carData={carData.data.carTypes.data}
                  onApplyFilters={applyFilters}
                />
              )}
            {brandData?.data &&
              modalData?.data &&
              fuelData?.data &&
              carData?.data &&
              !isMobile && (
                <FilterCard
                  className={"mt-3"}
                  brandData={brandData.data.productsBrands.data}
                  modalData={modalData.data.carVariants.data}
                  fuelData={fuelData.data.fuelTypes.data}
                  carData={carData.data.carTypes.data}
                  onApplyFilters={applyFilters}
                />
              )}
            <InstallmentCard />
          </Col>
        </Row>
      </Container>
    </section>
  );
}

export const getServerSideProps = wrapper.getServerSideProps(
  (store) => async (context) => {
    let brand = [""];
    let modals = [""];
    let car = [""];
    let fuel = [""];
    let min = "";
    let max = "";
    let car_type = context?.query?.car_type;
    let priceRange = context?.query?.priceRange;
    let products_brand = context?.query?.products_brand;
    let id = context?.query?.id;
    let fuel_types = context?.query?.fuelTypes;
    let query = context?.query?.slug ? context?.query?.slug[0] : null;
    // console.log(context.query, '11111111');
    if (query !== null && query?.includes("&")) {
      let arr = query.split("&");
      arr.forEach((q) => {
        let x = q.split("=");
        //   if (x[1].includes(',')) {
        //     switch (x[0]) {
        //       case 'brandSelected':
        //         brand = x[1].split(',')
        //       case 'carsSelected':
        //         car = x[1].split(',')
        //       case 'modalsSelected':
        //         modals = x[1].split(',')
        //       case 'fuelSelected':
        //         fuel = x[1].split(',')
        //     }
        //   } else if (x[1] != '') {
        //     switch (x[0]) {
        //       case 'brandSelected':
        //         brand = [x[1]]
        //       case 'carsSelected':
        //         car = [x[1]]
        //       case 'modalsSelected':
        //         modals = [x[1]]
        //       case 'fuelSelected':
        //         fuel = [x[1]]
        //       case 'min':
        //         min = x[1]
        //       case 'max':
        //         max = x[1]
        //     }
        //   } else {
        //     switch (x[0]) {
        //       case 'brandSelected':
        //         brand = []
        //       case 'carsSelected':
        //         car = []
        //       case 'modalsSelected':
        //         modals = []
        //       case 'fuelSelected':
        //         fuel = []
        //       case 'min':
        //         min = ''
        //       case 'max':
        //         max = ''
        //     }
        //   }
      });
    }

    if (context?.query?.slug) {
      // const { data } = await client.query({
      //   query: gql`query products(
      //         $ModelName:[String!]!
      //          $CarType: [String!]!
      //          $BrandName: [String!]!
      //          $Price: [String!]!
      //          $FuelType: [String!]!

      //        ) {
      //          productDetails(
      //            filters: {
      //             model_variants:{ModelName:{in:  $ModelName}}
      //              car_type: { CarType: { in: $CarType } }
      //              products_brand: { BrandName: { in: $BrandName } }
      //              fuel_type: { FuelType: { in: $FuelType } }
      //              Price: { between: $Price }
      //            }
      //          ) {
      //            data {
      //              id

      //              attributes {
      //                Price
      //                ProductName
      //                MaxPower
      //                Engine
      //                ExShowroomPrice
      //                TopSpeed
      //                DetailLatestUpdate
      //                DetailPriceRange
      //                DetailEngineTransmission
      //                DetailFeatures
      //                DetailSafety
      //                DetailRivals
      //                ExShowroomPrice
      //                car_type {
      //                  data {
      //                    id
      //                    attributes {
      //                      CarType
      //                    }
      //                  }
      //                }
      //                model_variants {
      //                  data {
      //                    id
      //                    attributes {
      //                      ModelName
      //                      Mileage
      //                      Type
      //                      Price
      //                    }
      //                  }
      //                }
      //                car_features {
      //                  data {
      //                    id
      //                    attributes {
      //                      Features
      //                    }
      //                  }
      //                }
      //                products_brand {
      //                  data {
      //                    id
      //                    attributes {
      //                      BrandName
      //                    }
      //                  }
      //                }
      //                ProductImage {
      //                  data {
      //                    attributes {
      //                      url
      //                    }
      //                  }
      //                }
      //                fuel_type {
      //                  data {
      //                    id
      //                    attributes {
      //                      FuelType
      //                    }
      //                  }
      //                }
      //              }
      //            }
      //          }
      //      }`,
      //   variables: {
      //     "ModelName": modals,
      //     "CarType": car,
      //     "BrandName": brand,
      //     "Price": [min, max],
      //     "FuelType": fuel
      //   }
      // });
      // store.dispatch(getAll_products(data));
      if (context?.query?.slug?.[0] == "bybudget") {
        const response = await axios.get(`${baseUrl}/api/products/searchProductsWithCarType?car_type=${context?.query?.slug?.[1].trim()}&priceRange=${context?.query?.slug?.[2].trim()}`)
        store.dispatch(getAll_products(response.data));
      } else if (context?.query?.slug?.[0] == "bybrand") {
        const response = await axios.get(
          `${baseUrl}/api/products/getListOfProductNames?products_brand=${context?.query?.slug?.[1]}&productName=${context?.query?.slug?.[2].trim()}`
        );
        store.dispatch(getAll_products(response.data));
      } else if (context?.query?.slug?.[0].includes('searchVehiclesWithLogos')) {
        const response = await axios.get(
          // `${baseUrl}/api/homepage/searchVehiclesWithLogos?car_type=${car_type}&priceRange=${priceRange}&products_brand=${products_brand}&fuel_types=${fuel_types}&id=${id}`
          `${baseUrl}/api/homepage/${context?.query?.slug?.[0]}`
        );
        store.dispatch(getAll_products(response.data));
      } else if (context?.query?.slug?.[0].includes('page') && !context?.query?.slug?.[0].includes('&page=1')) {
        const response = await axios.get(
          // `https://us-central1-nayagadiapis.cloudfunctions.net/nayagadiApi/api/homepage/searchVehiclesWithLogos?car_type=${car_type}&priceRange=${priceRange}&products_brand=${products_brand}&fuel_types=${fuel_types}&id=${id}`
          `${baseUrl}/api/products/getAllProducts?${context?.query?.slug?.[0]}`
        );
        store.dispatch(getAll_products(response.data));
      } else if (context?.query?.slug?.[0] == 'The-most-searched'){
        const response = await axios.get(`${baseUrl}/api/products/getTagNameWithProducts?TagName=MostSearchedVehicles`);
        store.dispatch(getAll_products(response.data));
      } else if (context?.query?.slug?.[0] == 'Feature'){
        const response = await axios.get(`${baseUrl}/api/products/getTagNameWithProducts?TagName=FeaturedVehicles`);
        store.dispatch(getAll_products(response.data));
      } else if (context?.query?.slug?.[0] == 'upcoming'){
        const response = await axios.get(`${baseUrl}/api/products/getTagNameWithProducts?TagName=UpcomingVehicles`);
        store.dispatch(getAll_products(response.data));
      } else {
        const response = await axios.get(
          `${baseUrl}/api/products/getAllProducts?name=${context?.query?.slug?.[0]}`
        );
        store.dispatch(getAll_products(response.data));
      }
    } else {
      if (context?.query?.type == 'bybrand'){
        if (context?.query?.brand){
          const response = await axios.get(
            `${baseUrl}/api/products/getListOfProductNames?products_brand=${context?.query?.id}&productName=undefined&page=${context?.query?.page}`
          );
          store.dispatch(getAll_products(response.data));
        } else if (context?.query?.model){
          const response = await axios.get(
            `${baseUrl}/api/products/getListOfProductNames?products_brand=${context?.query?.brand_id}&productName=${context?.query?.id}`
          );
          store.dispatch(getAll_products(response.data));
        }  
      } else if(context?.query?.type == 'bybudget'){
        const response = await axios.get(`${baseUrl}/api/products/searchProductsWithCarType?car_type=${context?.query?.bodytype}&priceRange=${context?.query?.pricerange}&page=${context?.query?.page}`);
        store.dispatch(getAll_products(response.data));
      } else if(Object.keys(context?.query).includes('page')){
        const response = await axios.get(
          // `https://us-central1-nayagadiapis.cloudfunctions.net/nayagadiApi/api/homepage/searchVehiclesWithLogos?car_type=${car_type}&priceRange=${priceRange}&products_brand=${products_brand}&fuel_types=${fuel_types}&id=${id}`
          `${baseUrl}/api/products/getAllProducts?page=${context?.query?.page}`
        );
        store.dispatch(getAll_products(response.data));
      } else {
      const response = await axios.get(
        `${baseUrl}/api/products/getAllProducts`
      );
      // const { data } = await client.query({
      //   query: gql`
      //   query {
      //     productDetailsDs {
      //       data {
      //         id
      //         attributes {
      //           ProductName
      //           SeatingCapacity
      //           DetailLatestUpdate
      //           DetailPrice
      //           DetailVariants
      //           DetailSeatingCapacity
      //           DetailEngineTransmission
      //           DetailFeatures
      //           DetailSafety
      //           DetailRivals
      //           Images
      //           Mileage
      //           BHPRange
      //           EngineRange
      //           MaxPower
      //           city
      //           highway
      //           MaxPower
      //           TopSpeed
      //           speedRange
      //           initialPrice
      //           finalPrice
      //           TopSpeed
      //           fuel_types {
      //             data {
      //               id
      //               attributes {
      //                 FuelType
      //               }
      //             }
      //           }
      //           variants {
      //             data {
      //               id
      //               attributes {
      //                 ModelVariantName
      //                 Price
      //                 Engine
      //                 BHP
      //                 SeatingCapacity
      //                 Mileage
      //                 Fuel
      //                 VariantDetailPrice
      //                 VariantDetailMileage
      //                 VariantDetailColour
      //                 VariantDetailEngineTransmission
      //                 VariantDetailSpecsFeatures
      //                 VariantDetailCompetitors
      //                 KeySpecifications
      //               }
      //             }
      //           }
      //           products_brand {
      //             data {
      //               id
      //               attributes {
      //                 BrandName
      //                 category {
      //                   data {
      //                     id
      //                     attributes {
      //                       CategoryType
      //                     }
      //                   }
      //                 }
      //               }
      //             }
      //           }
      //           car_type {
      //             data {
      //               id
      //               attributes {
      //                 CarType
      //               }
      //             }
      //           }
      //           category {
      //             data {
      //               id
      //               attributes {
      //                 CategoryType
      //               }
      //             }
      //           }
      //           key_features {
      //             data {
      //               id
      //               attributes {
      //                 Features
      //               }
      //             }
      //           }
      //         }
      //       }
      //     }
      //   }
      //   `
      // });
      store.dispatch(getAll_products(response.data));
    }
  }
}
);

export default Search;
